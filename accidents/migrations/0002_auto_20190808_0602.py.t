# Generated by Django 2.2.4 on 2019-08-07 17:48
from accidents.models import Accident, Vehicle, Road, Driver, Passanger, Pedestrian, Witness
from django.db import migrations, models
import faker
import random

def load_data(apps, schema_editor):

	#location names
	file1=open( '/home/buddha/project/traffic-master/accidents/migrations/places.txt','r')
	lst=[]
	data=file1.readlines()
	for i in data:
		lst.append(i.rstrip())

	#location coordinates
	file2=open( '/home/buddha/project/traffic-master/accidents/migrations/roads.txt' ,'r')
	lst2=[]
	data=file2.readlines()
	for i in data:
		lst2.append(eval(i.rstrip()))

	fake = faker.Faker()

	accidents = []
	vehicles = []
	drivers = []
	roads = []
	witnesses = []
	passengers = []
	pedestrians = []
	t=0

	for i in range(0,500):
		vc = random.randint(1,4)
		pac = random.randint(0,20)
		pec = random.randint(0,5)
		coord = random.choice(lst2)
		wc = random.randint(0,5)

		#Accidents
		accident_ = Accident(
			report_no = i,
		    police_office_name = random.choice(['traffic office durbarmarg','metropolitan traffic office police','swayambhu traffic police office','mahanagariya traffic police thapathali']),

		    police_office_province = 3,

		    police_office_district = 'Kathmandu',
		    no_of_vehicle_involved = vc,
		    no_of_driver_involved = vc,
		    no_of_passanger_involved = pac,
		    no_of_pedestrian_involved = pec,
		    		  
		    accident_seriousness = random.randint(0,3),
		    #will have to review this
		    accident_date_and_time = fake.date_time_this_decade(before_now=True, after_now=False, tzinfo=None),
		    
		    day_of_week = random.randint(0,6),

		    #time = fake.time(pattern="%H:%M:%S", end_datetime=None),

		    vehicle_control = random.randint(0,7),

		    collision_type = random.randint(0,10),
		    weather_condition = random.randint(0,3),
		    lighting_condition = random.randint(0,2),
		    hit_and_run = random.choice([True,False]),
		    accident_place_name = random.choice(['Kathmandu','Bhaktapur','Lalitpur']),
		    accident_location = random.choice(lst),

		    accident_location_latitude = coord[1],
		    accident_location_longitude = coord[0],
		    
		    road_number = random.randint(1,10000),
		    road_length = random.randint(100,10000),
		    # hundred_meters = fake.boolean(chance_of_getting_true=50),

		    # node_map = random.randint(0,100),
		    # node_no = random.randint(0,100),
		    # node_2 = random.randint(0,100),

		   # accident_spot_show_map = models.ImageField(upload_to=None, height_field=None, width_field=None, max_length=100)
		  #  accident_spot_measured_map = models.ImageField(upload_to=None, height_field=None, width_field=None, max_length=100)
		    police_info = fake.sentence(nb_words=6, variable_nb_words=True, ext_word_list=None),
		    investigation_officers_name = fake.name(),
		    investigation_officers_name_standard = random.randint(4,9),

		    reinvestigation_officers_name= fake.name(),
		    reinvestigation_officers_name_standard = random.randint(4,9),
		    noted_action = fake.sentence(nb_words=6, variable_nb_words=True, ext_word_list=None)
			)
		accidents.append(accident_)

		#roads
		road_ = Road(
			accident = accident_,
		    
		    road_runway_type = random.randint(0,1),
		    #Around 20 meter

		    intersection_type = random.randint(0,6),

		    road_description = random.randint(0,4),

		    road_surface = random.randint(0,2),

		    road_condition = random.randint(0,1),
		    
		    surface_condition = random.randint(0,3),

		    road_construction = random.choice([True, False])

			)

		roads.append(road_)


		#vehicles
		veh_temp = []
		

		for j in range(vc):
			veh = Vehicle(
			accident = accident_,
		    vehicle_registration_no = t,
		    vehicle_owner_name = fake.name(),
		    vehicle_owner_address = fake.address(),
		    third_party_insurance = random.choice([True, False]),
		    name_of_vehicle_company = fake.company(),

		    vehicle_type = random.randint(0,8),

		    
		    vehicle_action = random.randint(0,13),
		   
		    load_condition = random.randint(0,4),

		    mistake = random.randint(0,6),
		    vehicle_loss = random.randint(0,7),
		    owner_type = random.randint(0,6)
		    )
			veh_temp.append(veh)
			vehicles.append(veh)
			t += 1


		#drivers
		for j in range(vc):
			driv = Driver(
				vehicle = veh_temp[j],

			    driver_name = fake.name(),
			    driver_address = fake.address(),
			    driver_licence_no = random.randint(100000,500000),
			    report_taking_office = fake.state(),

			    
			    driver_sex = random.choice([0,1]),

			    driver_age = random.randint(13,75),

			    
			    driver_fault = random.randint(0,8),

			    
			    driving_licence_type = random.randint(0,3),

			    
			    driver_injury_type = random.randint(0,3),

			    
			    alcohol_used = random.randint(0,1),

			    seatbelt_or_helmet_used = random.choice([True,False])
			)
			drivers.append(driv)

		#passengers

		for j in range(pac):
			pas = Passanger(
                accident = accident_ ,
				#vehicle = random.choice(veh_temp),
				
			    passanger_name = fake.name(),
			    passanger_address = fake.address(),
			    vehicle_no = random.randint(100000,500000),
			    
			    passanger_sex = random.randint(0,1),

			    passanger_age = random.randint(1,100),
			    
			    injury_seriousness = random.randint(0,2),
			    
			    passanger_condition = random.randint(0,5),
			    
			    passanger_action = random.randint(0,4),

			    passanger_seatbelt_or_helmet_used = random.choice([True, False])
			    )
			passengers.append(pas)

		for j in range(pec):
			ped = Pedestrian(
				accident = accident_,
			    pedestrian_name = fake.name(),
			    pedestrian_address = fake.address(),

			    pedestrian_sex = random.randint(0,1),

			    pedestrian_age = random.randint(5,85),

			    pedestrian_injury_seriousness = random.randint(0,2), 
			    pedestrian_condition = random.randint(0,4),
			    pedestrian_action = random.randint(0,5),
			    pedestrian_alcohol_used = random.randint(0,1),
				)
			pedestrians.append(ped)

		for j in range(wc):
			wit = Witness(
				accident = accident_,
				witness_name = fake.name()
			    )
			witnesses.append(wit)

	Accident.objects.bulk_create(accidents)
	Vehicle.objects.bulk_create(vehicles)
	Driver.objects.bulk_create(drivers)
	Road.objects.bulk_create(roads)
	Witness.objects.bulk_create(witnesses)
	Passanger.objects.bulk_create(passengers)
	Pedestrian.objects.bulk_create(pedestrians)



class Migration(migrations.Migration):

    dependencies = [
        ('accidents', '0001_initial'),
    ]

    operations = [
    migrations.RunPython(load_data)
    ]
